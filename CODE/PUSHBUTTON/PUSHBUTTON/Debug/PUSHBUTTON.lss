
PUSHBUTTON.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000087  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000053  00000000  00000000  00000203  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000fb  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000354  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014a  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define ON			1
#define OFF			0

int main(void)
{
	DDRB	=	DIR_SW1;
  6c:	b8 98       	cbi	0x17, 0	; 23
	DDRB	=	DIR_SW2;
  6e:	b9 98       	cbi	0x17, 1	; 23

	PORTB	=	PORTB | (1<<PB0);
  70:	c0 9a       	sbi	0x18, 0	; 24
	PORTB	=	PORTB | (1<<PB1);
  72:	c1 9a       	sbi	0x18, 1	; 24

	DDRB	=	DIR_LED1;
  74:	be 9a       	sbi	0x17, 6	; 23
	DDRB	=	DIR_LED2;
  76:	bf 9a       	sbi	0x17, 7	; 23

	PORTB	=	PORTB & (~(1<<PB6));
  78:	c6 98       	cbi	0x18, 6	; 24
	PORTB	=	PORTB & (~(1<<PB7));
  7a:	c7 98       	cbi	0x18, 7	; 24

    while (1) 
    {
		if (VAL_SW1 == ON)
  7c:	b0 99       	sbic	0x16, 0	; 22
  7e:	02 c0       	rjmp	.+4      	; 0x84 <main+0x18>
		{
			PORTB	=	PORTB | (1<<PB6);
  80:	c6 9a       	sbi	0x18, 6	; 24
  82:	02 c0       	rjmp	.+4      	; 0x88 <main+0x1c>
		}
		else if (VAL_SW1 == OFF)
  84:	b0 99       	sbic	0x16, 0	; 22
		{
			PORTB	=	PORTB & (~(1<<PB6));
  86:	c6 98       	cbi	0x18, 6	; 24
		}

		if (VAL_SW2 == ON)
  88:	b1 99       	sbic	0x16, 1	; 22
  8a:	02 c0       	rjmp	.+4      	; 0x90 <main+0x24>
		{
			PORTB	=	PORTB | (1<<PB7);
  8c:	c7 9a       	sbi	0x18, 7	; 24
  8e:	f6 cf       	rjmp	.-20     	; 0x7c <main+0x10>
		}
		else if (VAL_SW2 == OFF)
  90:	b1 9b       	sbis	0x16, 1	; 22
  92:	f4 cf       	rjmp	.-24     	; 0x7c <main+0x10>
		{
			PORTB	=	PORTB & (~(1<<PB7));
  94:	c7 98       	cbi	0x18, 7	; 24
  96:	f2 cf       	rjmp	.-28     	; 0x7c <main+0x10>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
